#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-3-Clause
import os
import re
import sys
import time


def load_payloads(output_dir):
    file_regex = re.compile(r'(?P<arch>\w+)-(?P<payload>[\w-]+)\.bin')

    payloads = {}

    for root, _, files in os.walk(output_dir):
        for f in files:
            m = file_regex.match(f)
            if m is None:
                continue

            arch = m.group('arch').lower()
            payload_name = m.group('payload').lower()

            payload = payloads.get(payload_name, {})

            with open(os.path.join(root, f), 'rb') as infile:
                payload[arch] = infile.read()

            payloads[payload_name] = payload

    return payloads


def _format_bytes(payload: bytes) -> str:
    ret = ''
    col = 0
    sol = True

    for value in payload:
        if sol:
            sol = False
            ret += os.linesep + ' ' * 8 + "b'"

        ret += r'\x{:02x}'.format(value)
        col += 1

        if col == 16:
            ret += "'"
            sol = True
            col = 0

    if col != 0:
        ret += "'"

    return ret


def write_payload_source(outfile, payloads):
    outfile.write('# SPDX-License-Identifier: BSD-3-Clause' + os.linesep)
    outfile.write('"""' + os.linesep)
    outfile.write('Built-in Depthcharge payloads' + os.linesep)
    outfile.write('(Autogenerated on ' + time.asctime() + ')' + os.linesep)
    outfile.write('"""' + os.linesep)

    for name in payloads:
        outfile.write(os.linesep)
        outfile.write(name.upper() + ' = {' + os.linesep)

        for arch in payloads[name]:
            outfile.write(' ' * 4 + "'" + arch + "':")
            outfile.write(_format_bytes(payloads[name][arch]))
            outfile.write(',' + os.linesep)

        outfile.write('}' + os.linesep)


if __name__ == '__main__':
    if len(sys.argv) < 3 or '-h' in sys.argv or '--help' in sys.argv:
        usage = 'Usage: {:s}: <output dir> <output filename>'
        print(usage.format(os.path.basename(sys.argv[0])), file=sys.stderr)
        sys.exit(1)

    payloads = load_payloads(sys.argv[1])
    with open(os.path.join(sys.argv[1], sys.argv[2]), 'w') as outfile:
        write_payload_source(outfile, payloads)
